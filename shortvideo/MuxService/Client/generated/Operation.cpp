// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `Operation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Operation.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::mux::Param> iceC_mux_Param_init("::mux::Param");

const ::std::string iceC_mux_Operation_ids[2] =
{
    "::Ice::Object",
    "::mux::Operation"
};
const ::std::string iceC_mux_Operation_ops[] =
{
    "One",
    "Start",
    "Stop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_mux_Operation_Start_name = "Start";
const ::std::string iceC_mux_Operation_Stop_name = "Stop";
const ::std::string iceC_mux_Operation_One_name = "One";

}

bool
mux::Operation::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_mux_Operation_ids, iceC_mux_Operation_ids + 2, s);
}

::std::vector<::std::string>
mux::Operation::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_mux_Operation_ids[0], &iceC_mux_Operation_ids[2]);
}

::std::string
mux::Operation::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
mux::Operation::ice_staticId()
{
    static const ::std::string typeId = "::mux::Operation";
    return typeId;
}

/// \cond INTERNAL
bool
mux::Operation::_iceD_Start(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<Param> iceP_param;
    istr->readAll(iceP_param);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::string iceP_result;
    bool ret = this->Start(::std::move(iceP_param), iceP_result, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_result, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
mux::Operation::_iceD_Stop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<Param> iceP_param;
    istr->readAll(iceP_param);
    istr->readPendingValues();
    inS.endReadParams();
    this->Stop(::std::move(iceP_param), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
mux::Operation::_iceD_One(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_url;
    ::std::string iceP_timepoint;
    istr->readAll(iceP_url, iceP_timepoint);
    inS.endReadParams();
    ::std::string iceP_path;
    bool ret = this->One(::std::move(iceP_url), ::std::move(iceP_timepoint), iceP_path, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_path, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
mux::Operation::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_mux_Operation_ops, iceC_mux_Operation_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_mux_Operation_ops)
    {
        case 0:
        {
            return _iceD_One(in, current);
        }
        case 1:
        {
            return _iceD_Start(in, current);
        }
        case 2:
        {
            return _iceD_Stop(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

mux::Param::~Param()
{
}

const ::std::string&
mux::Param::ice_staticId()
{
    static const ::std::string typeId = "::mux::Param";
    return typeId;
}

/// \cond INTERNAL
void
mux::OperationPrx::_iceI_Start(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Operation::StartResult>>& outAsync, const ::std::shared_ptr<Param>& iceP_param, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_mux_Operation_Start_name);
    outAsync->invoke(iceC_mux_Operation_Start_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_param);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Operation::StartResult v;
            istr->readAll(v.result, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
mux::OperationPrx::_iceI_Stop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<Param>& iceP_param, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_mux_Operation_Stop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_param);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
mux::OperationPrx::_iceI_One(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Operation::OneResult>>& outAsync, const ::std::string& iceP_url, const ::std::string& iceP_timepoint, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_mux_Operation_One_name);
    outAsync->invoke(iceC_mux_Operation_One_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_url, iceP_timepoint);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Operation::OneResult v;
            istr->readAll(v.path, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
mux::OperationPrx::_newInstance() const
{
    return ::IceInternal::createProxy<OperationPrx>();
}
/// \endcond

const ::std::string&
mux::OperationPrx::ice_staticId()
{
    return Operation::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_mux_Operation_Start_name = "Start";

const ::std::string iceC_mux_Operation_Stop_name = "Stop";

const ::std::string iceC_mux_Operation_One_name = "One";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::mux::upCast(Param* p) { return p; }

void
::IceProxy::mux::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Param>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Param;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::mux::Param::_newInstance() const
{
    return new Param;
}
/// \endcond

const ::std::string&
IceProxy::mux::Param::ice_staticId()
{
    return ::mux::Param::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::mux::upCast(Operation* p) { return p; }

void
::IceProxy::mux::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Operation>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Operation;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::mux::Operation::_iceI_begin_Start(const ::mux::ParamPtr& iceP_param, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_mux_Operation_Start_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_mux_Operation_Start_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_mux_Operation_Start_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_param);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_mux_Operation_Start_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::mux::Operation::end_Start(::std::string& iceP_result, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_mux_Operation_Start_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_result);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::mux::Operation::_iceI_end_Start(::std::string& iceP_result, bool& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_mux_Operation_Start_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_result);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::mux::Operation::_iceI_begin_Stop(const ::mux::ParamPtr& iceP_param, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_mux_Operation_Stop_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_mux_Operation_Stop_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_param);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_mux_Operation_Stop_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::mux::Operation::end_Stop(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_mux_Operation_Stop_name);
}

::Ice::AsyncResultPtr
IceProxy::mux::Operation::_iceI_begin_One(const ::std::string& iceP_url, const ::std::string& iceP_timepoint, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_mux_Operation_One_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_mux_Operation_One_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_mux_Operation_One_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_url);
        ostr->write(iceP_timepoint);
        result->endWriteParams();
        result->invoke(iceC_mux_Operation_One_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::mux::Operation::end_One(::std::string& iceP_path, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_mux_Operation_One_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_path);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::mux::Operation::_iceI_end_One(::std::string& iceP_path, bool& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_mux_Operation_One_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_path);
    istr->read(ret);
    result->_endReadParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::mux::Operation::_newInstance() const
{
    return new Operation;
}
/// \endcond

const ::std::string&
IceProxy::mux::Operation::ice_staticId()
{
    return ::mux::Operation::ice_staticId();
}

mux::Param::~Param()
{
}

/// \cond INTERNAL
::Ice::Object* mux::upCast(Param* p) { return p; }

/// \endcond
::Ice::ObjectPtr
mux::Param::ice_clone() const
{
    ::Ice::Object* p = new Param(*this);
    return p;
}

namespace
{
const ::std::string iceC_mux_Param_ids[2] =
{
    "::Ice::Object",
    "::mux::Param"
};

}

bool
mux::Param::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_mux_Param_ids, iceC_mux_Param_ids + 2, s);
}

::std::vector< ::std::string>
mux::Param::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_mux_Param_ids[0], &iceC_mux_Param_ids[2]);
}

const ::std::string&
mux::Param::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
mux::Param::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::mux::Param";
    return typeId;
#else
    return iceC_mux_Param_ids[1];
#endif
}

/// \cond STREAM
void
mux::Param::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Param, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
mux::Param::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Param, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::mux::Param> iceC_mux_Param_init("::mux::Param");
}

::Ice::ValueFactoryPtr
mux::Param::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::mux::Param::ice_staticId());
}

/// \cond INTERNAL
void
mux::_icePatchObjectPtr(ParamPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ParamPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Param::ice_staticId(), v);
    }
}
/// \endcond

mux::Operation::~Operation()
{
}

/// \cond INTERNAL
::Ice::Object* mux::upCast(Operation* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_mux_Operation_ids[2] =
{
    "::Ice::Object",
    "::mux::Operation"
};

}

bool
mux::Operation::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_mux_Operation_ids, iceC_mux_Operation_ids + 2, s);
}

::std::vector< ::std::string>
mux::Operation::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_mux_Operation_ids[0], &iceC_mux_Operation_ids[2]);
}

const ::std::string&
mux::Operation::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
mux::Operation::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::mux::Operation";
    return typeId;
#else
    return iceC_mux_Operation_ids[1];
#endif
}

/// \cond INTERNAL
bool
mux::Operation::_iceD_Start(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ParamPtr iceP_param;
    istr->read(iceP_param);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::string iceP_result;
    bool ret = this->Start(iceP_param, iceP_result, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_result);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
mux::Operation::_iceD_Stop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ParamPtr iceP_param;
    istr->read(iceP_param);
    istr->readPendingValues();
    inS.endReadParams();
    this->Stop(iceP_param, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
mux::Operation::_iceD_One(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_url;
    ::std::string iceP_timepoint;
    istr->read(iceP_url);
    istr->read(iceP_timepoint);
    inS.endReadParams();
    ::std::string iceP_path;
    bool ret = this->One(iceP_url, iceP_timepoint, iceP_path, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_path);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_mux_Operation_all[] =
{
    "One",
    "Start",
    "Stop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
mux::Operation::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_mux_Operation_all, iceC_mux_Operation_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_mux_Operation_all)
    {
        case 0:
        {
            return _iceD_One(in, current);
        }
        case 1:
        {
            return _iceD_Start(in, current);
        }
        case 2:
        {
            return _iceD_Stop(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
mux::Operation::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Operation, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
mux::Operation::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Operation, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
mux::_icePatchObjectPtr(OperationPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = OperationPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Operation::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
