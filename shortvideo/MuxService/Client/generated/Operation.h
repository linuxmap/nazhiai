// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `Operation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Operation_h__
#define __Operation_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace mux
{

class Param;
class Operation;
class OperationPrx;

}

namespace mux
{

class Operation : public virtual ::Ice::Object
{
public:

    using ProxyType = OperationPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to Start.
     */
    struct StartResult
    {
        bool returnValue;
        ::std::string result;
    };

    virtual bool Start(::std::shared_ptr<Param> param, ::std::string& result, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_Start(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void Stop(::std::shared_ptr<Param> param, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_Stop(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to One.
     */
    struct OneResult
    {
        bool returnValue;
        ::std::string path;
    };

    virtual bool One(::std::string url, ::std::string timepoint, ::std::string& path, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_One(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace mux
{

class Param : public ::Ice::ValueHelper<Param, ::Ice::Value>
{
public:

    virtual ~Param();

    Param() = default;

    Param(const Param&) = default;
    Param(Param&&) = default;
    Param& operator=(const Param&) = default;
    Param& operator=(Param&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit Param(const ::std::string& url) :
        url(::std::move(url))
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(url);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string url;
};

/// \cond INTERNAL
static Param _iceS_Param_init;
/// \endcond

}

namespace mux
{

class OperationPrx : public virtual ::Ice::Proxy<OperationPrx, ::Ice::ObjectPrx>
{
public:

    bool Start(const ::std::shared_ptr<Param>& param, ::std::string& result, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Operation::StartResult>(true, this, &OperationPrx::_iceI_Start, param, context).get();
        result = ::std::move(_result.result);
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto StartAsync(const ::std::shared_ptr<Param>& param, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Operation::StartResult>>().get_future())
    {
        return _makePromiseOutgoing<Operation::StartResult, P>(false, this, &OperationPrx::_iceI_Start, param, context);
    }

    ::std::function<void()>
    StartAsync(const ::std::shared_ptr<Param>& param,
               ::std::function<void(bool, ::std::string)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Operation::StartResult&& _result)
        {
            response(_result.returnValue, ::std::move(_result.result));
        };
        return _makeLamdaOutgoing<Operation::StartResult>(_responseCb, ex, sent, this, &OperationPrx::_iceI_Start, param, context);
    }

    /// \cond INTERNAL
    void _iceI_Start(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Operation::StartResult>>&, const ::std::shared_ptr<Param>&, const ::Ice::Context&);
    /// \endcond

    void Stop(const ::std::shared_ptr<Param>& param, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &OperationPrx::_iceI_Stop, param, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto StopAsync(const ::std::shared_ptr<Param>& param, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &OperationPrx::_iceI_Stop, param, context);
    }

    ::std::function<void()>
    StopAsync(const ::std::shared_ptr<Param>& param,
              ::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &OperationPrx::_iceI_Stop, param, context);
    }

    /// \cond INTERNAL
    void _iceI_Stop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<Param>&, const ::Ice::Context&);
    /// \endcond

    bool One(const ::std::string& url, const ::std::string& timepoint, ::std::string& path, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Operation::OneResult>(true, this, &OperationPrx::_iceI_One, url, timepoint, context).get();
        path = ::std::move(_result.path);
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto OneAsync(const ::std::string& url, const ::std::string& timepoint, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Operation::OneResult>>().get_future())
    {
        return _makePromiseOutgoing<Operation::OneResult, P>(false, this, &OperationPrx::_iceI_One, url, timepoint, context);
    }

    ::std::function<void()>
    OneAsync(const ::std::string& url, const ::std::string& timepoint,
             ::std::function<void(bool, ::std::string)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Operation::OneResult&& _result)
        {
            response(_result.returnValue, ::std::move(_result.path));
        };
        return _makeLamdaOutgoing<Operation::OneResult>(_responseCb, ex, sent, this, &OperationPrx::_iceI_One, url, timepoint, context);
    }

    /// \cond INTERNAL
    void _iceI_One(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Operation::OneResult>>&, const ::std::string&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    OperationPrx() = default;
    friend ::std::shared_ptr<OperationPrx> IceInternal::createProxy<OperationPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::mux::Param, S>
{
    static void read(S* istr, ::mux::Param& v)
    {
        istr->readAll(v.url);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace mux
{

using ParamPtr = ::std::shared_ptr<Param>;

using OperationPtr = ::std::shared_ptr<Operation>;
using OperationPrxPtr = ::std::shared_ptr<OperationPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace mux
{

class Param;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::mux::Param>&);
::IceProxy::Ice::Object* upCast(::IceProxy::mux::Param*);
/// \endcond

class Operation;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::mux::Operation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::mux::Operation*);
/// \endcond

}

}

namespace mux
{

class Param;
/// \cond INTERNAL
::Ice::Object* upCast(Param*);
/// \endcond
typedef ::IceInternal::Handle< Param> ParamPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::mux::Param> ParamPrx;
typedef ParamPrx ParamPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(ParamPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class Operation;
/// \cond INTERNAL
::Ice::Object* upCast(Operation*);
/// \endcond
typedef ::IceInternal::Handle< Operation> OperationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::mux::Operation> OperationPrx;
typedef OperationPrx OperationPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(OperationPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace mux
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::mux::Operation::begin_Start.
 * Create a wrapper instance by calling ::mux::newCallback_Operation_Start.
 */
class Callback_Operation_Start_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Operation_Start_Base> Callback_Operation_StartPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::mux::Operation::begin_Stop.
 * Create a wrapper instance by calling ::mux::newCallback_Operation_Stop.
 */
class Callback_Operation_Stop_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Operation_Stop_Base> Callback_Operation_StopPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::mux::Operation::begin_One.
 * Create a wrapper instance by calling ::mux::newCallback_Operation_One.
 */
class Callback_Operation_One_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Operation_One_Base> Callback_Operation_OnePtr;

}

namespace IceProxy
{

namespace mux
{

class Param : public virtual ::Ice::Proxy<Param, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class Operation : public virtual ::Ice::Proxy<Operation, ::IceProxy::Ice::Object>
{
public:

    bool Start(const ::mux::ParamPtr& param, ::std::string& result, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_Start(result, _iceI_begin_Start(param, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_Start(const ::mux::ParamPtr& param, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_Start(param, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Start(const ::mux::ParamPtr& param, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Start(param, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_Start(const ::mux::ParamPtr& param, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Start(param, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_Start(const ::mux::ParamPtr& param, const ::mux::Callback_Operation_StartPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Start(param, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_Start(const ::mux::ParamPtr& param, const ::Ice::Context& context, const ::mux::Callback_Operation_StartPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Start(param, context, cb, cookie);
    }

    bool end_Start(::std::string& result, const ::Ice::AsyncResultPtr& result_);
    /// \cond INTERNAL

    void _iceI_end_Start(::std::string& iceP_result, bool& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_Start(const ::mux::ParamPtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void Stop(const ::mux::ParamPtr& param, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_Stop(_iceI_begin_Stop(param, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_Stop(const ::mux::ParamPtr& param, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_Stop(param, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Stop(const ::mux::ParamPtr& param, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Stop(param, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_Stop(const ::mux::ParamPtr& param, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Stop(param, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_Stop(const ::mux::ParamPtr& param, const ::mux::Callback_Operation_StopPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Stop(param, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_Stop(const ::mux::ParamPtr& param, const ::Ice::Context& context, const ::mux::Callback_Operation_StopPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Stop(param, context, cb, cookie);
    }

    void end_Stop(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_Stop(const ::mux::ParamPtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool One(const ::std::string& url, const ::std::string& timepoint, ::std::string& path, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_One(path, _iceI_begin_One(url, timepoint, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_One(const ::std::string& url, const ::std::string& timepoint, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_One(url, timepoint, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_One(const ::std::string& url, const ::std::string& timepoint, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_One(url, timepoint, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_One(const ::std::string& url, const ::std::string& timepoint, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_One(url, timepoint, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_One(const ::std::string& url, const ::std::string& timepoint, const ::mux::Callback_Operation_OnePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_One(url, timepoint, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_One(const ::std::string& url, const ::std::string& timepoint, const ::Ice::Context& context, const ::mux::Callback_Operation_OnePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_One(url, timepoint, context, cb, cookie);
    }

    bool end_One(::std::string& path, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_One(::std::string& iceP_path, bool& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_One(const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace mux
{

class Param : public virtual ::Ice::Object
{
public:

    typedef ParamPrx ProxyType;
    typedef ParamPtr PointerType;

    virtual ~Param();

    Param()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit Param(const ::std::string& url) :
        url(url)
    {
    }

    /**
     * Polymporphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::std::string url;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_Param_init = ::mux::Param::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const Param& lhs, const Param& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Param& lhs, const Param& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class Operation : public virtual ::Ice::Object
{
public:

    typedef OperationPrx ProxyType;
    typedef OperationPtr PointerType;

    virtual ~Operation();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual bool Start(const ParamPtr& param, ::std::string& result, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_Start(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void Stop(const ParamPtr& param, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_Stop(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool One(const ::std::string& url, const ::std::string& timepoint, ::std::string& path, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_One(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Operation& lhs, const Operation& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Operation& lhs, const Operation& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::mux::Param, S>
{
    static void write(S* ostr, const ::mux::Param& v)
    {
        ostr->write(v.url);
    }
};

template<typename S>
struct StreamReader< ::mux::Param, S>
{
    static void read(S* istr, ::mux::Param& v)
    {
        istr->read(v.url);
    }
};

}
/// \endcond

namespace mux
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::mux::Operation::begin_Start.
 * Create a wrapper instance by calling ::mux::newCallback_Operation_Start.
 */
template<class T>
class CallbackNC_Operation_Start : public Callback_Operation_Start_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::std::string&);

    CallbackNC_Operation_Start(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        OperationPrx proxy = OperationPrx::uncheckedCast(result->getProxy());
        ::std::string iceP_result;
        bool ret;
        try
        {
            ret = proxy->end_Start(iceP_result, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_result);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::mux::Operation::begin_Start.
 */
template<class T> Callback_Operation_StartPtr
newCallback_Operation_Start(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_Start<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::mux::Operation::begin_Start.
 */
template<class T> Callback_Operation_StartPtr
newCallback_Operation_Start(T* instance, void (T::*cb)(bool, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_Start<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::mux::Operation::begin_Start.
 * Create a wrapper instance by calling ::mux::newCallback_Operation_Start.
 */
template<class T, typename CT>
class Callback_Operation_Start : public Callback_Operation_Start_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::std::string&, const CT&);

    Callback_Operation_Start(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        OperationPrx proxy = OperationPrx::uncheckedCast(result->getProxy());
        ::std::string iceP_result;
        bool ret;
        try
        {
            ret = proxy->end_Start(iceP_result, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_result, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::mux::Operation::begin_Start.
 */
template<class T, typename CT> Callback_Operation_StartPtr
newCallback_Operation_Start(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_Start<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::mux::Operation::begin_Start.
 */
template<class T, typename CT> Callback_Operation_StartPtr
newCallback_Operation_Start(T* instance, void (T::*cb)(bool, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_Start<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::mux::Operation::begin_Stop.
 * Create a wrapper instance by calling ::mux::newCallback_Operation_Stop.
 */
template<class T>
class CallbackNC_Operation_Stop : public Callback_Operation_Stop_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Operation_Stop(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::mux::Operation::begin_Stop.
 */
template<class T> Callback_Operation_StopPtr
newCallback_Operation_Stop(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_Stop<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::mux::Operation::begin_Stop.
 */
template<class T> Callback_Operation_StopPtr
newCallback_Operation_Stop(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_Stop<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::mux::Operation::begin_Stop.
 */
template<class T> Callback_Operation_StopPtr
newCallback_Operation_Stop(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_Stop<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::mux::Operation::begin_Stop.
 */
template<class T> Callback_Operation_StopPtr
newCallback_Operation_Stop(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_Stop<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::mux::Operation::begin_Stop.
 * Create a wrapper instance by calling ::mux::newCallback_Operation_Stop.
 */
template<class T, typename CT>
class Callback_Operation_Stop : public Callback_Operation_Stop_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Operation_Stop(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::mux::Operation::begin_Stop.
 */
template<class T, typename CT> Callback_Operation_StopPtr
newCallback_Operation_Stop(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_Stop<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::mux::Operation::begin_Stop.
 */
template<class T, typename CT> Callback_Operation_StopPtr
newCallback_Operation_Stop(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_Stop<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::mux::Operation::begin_Stop.
 */
template<class T, typename CT> Callback_Operation_StopPtr
newCallback_Operation_Stop(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_Stop<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::mux::Operation::begin_Stop.
 */
template<class T, typename CT> Callback_Operation_StopPtr
newCallback_Operation_Stop(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_Stop<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::mux::Operation::begin_One.
 * Create a wrapper instance by calling ::mux::newCallback_Operation_One.
 */
template<class T>
class CallbackNC_Operation_One : public Callback_Operation_One_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::std::string&);

    CallbackNC_Operation_One(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        OperationPrx proxy = OperationPrx::uncheckedCast(result->getProxy());
        ::std::string iceP_path;
        bool ret;
        try
        {
            ret = proxy->end_One(iceP_path, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_path);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::mux::Operation::begin_One.
 */
template<class T> Callback_Operation_OnePtr
newCallback_Operation_One(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_One<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::mux::Operation::begin_One.
 */
template<class T> Callback_Operation_OnePtr
newCallback_Operation_One(T* instance, void (T::*cb)(bool, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_One<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::mux::Operation::begin_One.
 * Create a wrapper instance by calling ::mux::newCallback_Operation_One.
 */
template<class T, typename CT>
class Callback_Operation_One : public Callback_Operation_One_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::std::string&, const CT&);

    Callback_Operation_One(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        OperationPrx proxy = OperationPrx::uncheckedCast(result->getProxy());
        ::std::string iceP_path;
        bool ret;
        try
        {
            ret = proxy->end_One(iceP_path, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_path, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::mux::Operation::begin_One.
 */
template<class T, typename CT> Callback_Operation_OnePtr
newCallback_Operation_One(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_One<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::mux::Operation::begin_One.
 */
template<class T, typename CT> Callback_Operation_OnePtr
newCallback_Operation_One(T* instance, void (T::*cb)(bool, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_One<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
