// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `Operation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Operation_h__
#define __Operation_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace clean
{

class Param;
class CleanShortVideo;
class CleanShortVideoPrx;

}

namespace clean
{

class CleanShortVideo : public virtual ::Ice::Object
{
public:

    using ProxyType = CleanShortVideoPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to Clean.
     */
    struct CleanResult
    {
        bool returnValue;
        ::std::string result;
    };

    virtual bool Clean(::std::shared_ptr<Param> param, ::std::string& result, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_Clean(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace clean
{

class Param : public ::Ice::ValueHelper<Param, ::Ice::Value>
{
public:

    virtual ~Param();

    Param() = default;

    Param(const Param&) = default;
    Param(Param&&) = default;
    Param& operator=(const Param&) = default;
    Param& operator=(Param&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Param(int hostid, const ::std::string& url, const ::std::string& begin, const ::std::string& end) :
        hostid(hostid),
        url(::std::move(url)),
        begin(::std::move(begin)),
        end(::std::move(end))
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const int&, const ::std::string&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(hostid, url, begin, end);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int hostid;
    ::std::string url;
    ::std::string begin;
    ::std::string end;
};

/// \cond INTERNAL
static Param _iceS_Param_init;
/// \endcond

}

namespace clean
{

class CleanShortVideoPrx : public virtual ::Ice::Proxy<CleanShortVideoPrx, ::Ice::ObjectPrx>
{
public:

    bool Clean(const ::std::shared_ptr<Param>& param, ::std::string& result, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<CleanShortVideo::CleanResult>(true, this, &CleanShortVideoPrx::_iceI_Clean, param, context).get();
        result = ::std::move(_result.result);
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto CleanAsync(const ::std::shared_ptr<Param>& param, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<CleanShortVideo::CleanResult>>().get_future())
    {
        return _makePromiseOutgoing<CleanShortVideo::CleanResult, P>(false, this, &CleanShortVideoPrx::_iceI_Clean, param, context);
    }

    ::std::function<void()>
    CleanAsync(const ::std::shared_ptr<Param>& param,
               ::std::function<void(bool, ::std::string)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](CleanShortVideo::CleanResult&& _result)
        {
            response(_result.returnValue, ::std::move(_result.result));
        };
        return _makeLamdaOutgoing<CleanShortVideo::CleanResult>(_responseCb, ex, sent, this, &CleanShortVideoPrx::_iceI_Clean, param, context);
    }

    /// \cond INTERNAL
    void _iceI_Clean(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<CleanShortVideo::CleanResult>>&, const ::std::shared_ptr<Param>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    CleanShortVideoPrx() = default;
    friend ::std::shared_ptr<CleanShortVideoPrx> IceInternal::createProxy<CleanShortVideoPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::clean::Param, S>
{
    static void read(S* istr, ::clean::Param& v)
    {
        istr->readAll(v.hostid, v.url, v.begin, v.end);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace clean
{

using ParamPtr = ::std::shared_ptr<Param>;

using CleanShortVideoPtr = ::std::shared_ptr<CleanShortVideo>;
using CleanShortVideoPrxPtr = ::std::shared_ptr<CleanShortVideoPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace clean
{

class Param;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::clean::Param>&);
::IceProxy::Ice::Object* upCast(::IceProxy::clean::Param*);
/// \endcond

class CleanShortVideo;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::clean::CleanShortVideo>&);
::IceProxy::Ice::Object* upCast(::IceProxy::clean::CleanShortVideo*);
/// \endcond

}

}

namespace clean
{

class Param;
/// \cond INTERNAL
::Ice::Object* upCast(Param*);
/// \endcond
typedef ::IceInternal::Handle< Param> ParamPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::clean::Param> ParamPrx;
typedef ParamPrx ParamPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(ParamPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class CleanShortVideo;
/// \cond INTERNAL
::Ice::Object* upCast(CleanShortVideo*);
/// \endcond
typedef ::IceInternal::Handle< CleanShortVideo> CleanShortVideoPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::clean::CleanShortVideo> CleanShortVideoPrx;
typedef CleanShortVideoPrx CleanShortVideoPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(CleanShortVideoPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace clean
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::clean::CleanShortVideo::begin_Clean.
 * Create a wrapper instance by calling ::clean::newCallback_CleanShortVideo_Clean.
 */
class Callback_CleanShortVideo_Clean_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CleanShortVideo_Clean_Base> Callback_CleanShortVideo_CleanPtr;

}

namespace IceProxy
{

namespace clean
{

class Param : public virtual ::Ice::Proxy<Param, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class CleanShortVideo : public virtual ::Ice::Proxy<CleanShortVideo, ::IceProxy::Ice::Object>
{
public:

    bool Clean(const ::clean::ParamPtr& param, ::std::string& result, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_Clean(result, _iceI_begin_Clean(param, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_Clean(const ::clean::ParamPtr& param, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_Clean(param, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Clean(const ::clean::ParamPtr& param, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Clean(param, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_Clean(const ::clean::ParamPtr& param, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Clean(param, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_Clean(const ::clean::ParamPtr& param, const ::clean::Callback_CleanShortVideo_CleanPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Clean(param, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_Clean(const ::clean::ParamPtr& param, const ::Ice::Context& context, const ::clean::Callback_CleanShortVideo_CleanPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Clean(param, context, cb, cookie);
    }

    bool end_Clean(::std::string& result, const ::Ice::AsyncResultPtr& result_);
    /// \cond INTERNAL

    void _iceI_end_Clean(::std::string& iceP_result, bool& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_Clean(const ::clean::ParamPtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace clean
{

class Param : public virtual ::Ice::Object
{
public:

    typedef ParamPrx ProxyType;
    typedef ParamPtr PointerType;

    virtual ~Param();

    Param()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    Param(::Ice::Int hostid, const ::std::string& url, const ::std::string& begin, const ::std::string& end) :
        hostid(hostid),
        url(url),
        begin(begin),
        end(end)
    {
    }

    /**
     * Polymporphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Ice::Int hostid;
    ::std::string url;
    ::std::string begin;
    ::std::string end;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_Param_init = ::clean::Param::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const Param& lhs, const Param& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Param& lhs, const Param& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class CleanShortVideo : public virtual ::Ice::Object
{
public:

    typedef CleanShortVideoPrx ProxyType;
    typedef CleanShortVideoPtr PointerType;

    virtual ~CleanShortVideo();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual bool Clean(const ParamPtr& param, ::std::string& result, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_Clean(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const CleanShortVideo& lhs, const CleanShortVideo& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const CleanShortVideo& lhs, const CleanShortVideo& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::clean::Param, S>
{
    static void write(S* ostr, const ::clean::Param& v)
    {
        ostr->write(v.hostid);
        ostr->write(v.url);
        ostr->write(v.begin);
        ostr->write(v.end);
    }
};

template<typename S>
struct StreamReader< ::clean::Param, S>
{
    static void read(S* istr, ::clean::Param& v)
    {
        istr->read(v.hostid);
        istr->read(v.url);
        istr->read(v.begin);
        istr->read(v.end);
    }
};

}
/// \endcond

namespace clean
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::clean::CleanShortVideo::begin_Clean.
 * Create a wrapper instance by calling ::clean::newCallback_CleanShortVideo_Clean.
 */
template<class T>
class CallbackNC_CleanShortVideo_Clean : public Callback_CleanShortVideo_Clean_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::std::string&);

    CallbackNC_CleanShortVideo_Clean(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CleanShortVideoPrx proxy = CleanShortVideoPrx::uncheckedCast(result->getProxy());
        ::std::string iceP_result;
        bool ret;
        try
        {
            ret = proxy->end_Clean(iceP_result, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_result);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::clean::CleanShortVideo::begin_Clean.
 */
template<class T> Callback_CleanShortVideo_CleanPtr
newCallback_CleanShortVideo_Clean(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CleanShortVideo_Clean<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::clean::CleanShortVideo::begin_Clean.
 */
template<class T> Callback_CleanShortVideo_CleanPtr
newCallback_CleanShortVideo_Clean(T* instance, void (T::*cb)(bool, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CleanShortVideo_Clean<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::clean::CleanShortVideo::begin_Clean.
 * Create a wrapper instance by calling ::clean::newCallback_CleanShortVideo_Clean.
 */
template<class T, typename CT>
class Callback_CleanShortVideo_Clean : public Callback_CleanShortVideo_Clean_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::std::string&, const CT&);

    Callback_CleanShortVideo_Clean(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CleanShortVideoPrx proxy = CleanShortVideoPrx::uncheckedCast(result->getProxy());
        ::std::string iceP_result;
        bool ret;
        try
        {
            ret = proxy->end_Clean(iceP_result, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_result, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::clean::CleanShortVideo::begin_Clean.
 */
template<class T, typename CT> Callback_CleanShortVideo_CleanPtr
newCallback_CleanShortVideo_Clean(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CleanShortVideo_Clean<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::clean::CleanShortVideo::begin_Clean.
 */
template<class T, typename CT> Callback_CleanShortVideo_CleanPtr
newCallback_CleanShortVideo_Clean(T* instance, void (T::*cb)(bool, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CleanShortVideo_Clean<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
